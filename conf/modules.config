/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// Default parameters
params.outdir = "results"
conda.enabled = false

// Minimum thresholds for filtering
params.GQ_min = 0
params.DP_min = 0

params.genome_build = "hg38"
params.centromeres_bed = null
params.segdups_bed = null
params.hla_kir_bed = null
params.excluded_regions_bed = null


process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'BCFTOOLS_DELETE_ANNOTATIONS' {
        // Remove unused annotations to speed up processing and reduce memory usage
        ext.prefix = { "${meta.id}_filtered" }
        ext.args = '-x INFO,FORMAT/AF,FORMAT/F1R2,FORMAT/F2R1,FORMAT/PL,FORMAT/GP,FORMAT/PRI,FORMAT/SB,FORMAT/MB,FORMAT/PS -Oz -W=tbi'
        publishDir = [ path: "${params.outdir}/PREPROCESS/REMOVE_ANNOTATIONS", mode: 'copy' ]
    }

    withName: BCFTOOLS_ISEC {
        // Intersection of trio VCFs to retain only common variants
        ext.args = '-n=3 -c all -Oz'
        publishDir = [ path: "${params.outdir}/PREPROCESS/COMBINE_VCF", mode: 'copy' ]
   }

    withName: BCFTOOLS_MERGE {
        // Merge common variants across trio into a single VCF
        ext.args = '-Oz -W=tbi'
        publishDir = [ path: "${params.outdir}/PREPROCESS/COMBINE_VCF", mode: 'copy' ]
   }

   withName: 'VIEW_MASK' {
        // Remove variants overlapping structural variants (SVs) such as deletions,
        // duplications, or insertions detected in any trio member (from BED file)
        ext.prefix = { "${meta.id}_preprocessed" }
        ext.args = '-Oz -W=tbi'  
        publishDir = [ path: "${params.outdir}/PREPROCESS/SV_MASK_BED", mode: 'copy' ]
    }

    withName: 'BCFTOOLS_VIEW_BIALLELIC' {
        // Keep only biallelic SNPs
        ext.prefix = { "${meta.id}_snps_biallelic" }
        ext.args = '-m2 -M2 -v snps -Oz -W=tbi'
        publishDir = [ path: "${params.outdir}/PREPROCESS/FILTER_LOWCONF", mode: 'copy' ]
    }

    withName: 'BCFTOOLS_VIEW_QUAL_MIN' {
        // Apply minimum quality/depth thresholds (default: GQ=0, DP=0)
        ext.prefix = { "${meta.id}_snps_biallelic_qualMin" }
        ext.args = { "-i 'MIN(FMT/GQ)>=${params.GQ_min} && MIN(FMT/DP)>=${params.DP_min}' -Oz -W=tbi" }
        publishDir = [ path: "${params.outdir}/PREPROCESS/FILTER_LOWCONF", mode: 'copy' ]
    }

    withName: 'BCFTOOLS_VIEW_REFHOMO_EXCLUDE' {
        // Exclude variants homozygous for the reference allele in all trio members
        ext.prefix = { "${meta.id}_snps_biallelic_qualMin_noRefHom" }
        ext.args = "-e 'COUNT(GT=\"0/0\")+COUNT(GT=\"0|0\")==3' -Oz -W=tbi"
        publishDir = [ path: "${params.outdir}/PREPROCESS/FILTER_LOWCONF", mode: 'copy' ]
    }

    
    withName: BCFTOOLS_VIEW_EXCL_CENTROMERES {
        // Exclude centromeres. Falls back to conf/resources/<genome>/centromeres.bed if param not provided
        ext.prefix = { "${meta.id}_noCentromeres" }
        ext.args = { 
        def centromeres_file = params.centromeres_bed ?: "${projectDir}/conf/resources/${params.genome_build}/centromeres.bed"
        return "-T ^${centromeres_file} -Oz -W=tbi"
        }
        
        publishDir = [ path: "${params.outdir}/PREPROCESS/FILTER_LOWCONF", mode: 'copy' ]
    }

    withName: BCFTOOLS_VIEW_EXCL_SEGDUPS {
        // Exclude segmental duplications
        ext.prefix = { "${meta.id}_noCentromeres_noSegDumps" }
        ext.args = { 
        def segdups_file = params.segdups_bed ?: "${projectDir}/conf/resources/${params.genome_build}/segmental_duplications.bed"
        return "-T ^${segdups_file} -Oz -W=tbi"
        }
        publishDir = [ path: "${params.outdir}/PREPROCESS/FILTER_LOWCONF", mode: 'copy' ]
    }

    withName: BCFTOOLS_VIEW_EXCL_HLAKIR {
        // Exclude HLA/KIR regions
        ext.prefix = { "${meta.id}_noCentromeres_noSegDumps_noHLAKIR" }
        ext.args = { 
        def hla_kir_file = params.hla_kir_bed ?: "${projectDir}/conf/resources/${params.genome_build}/hla_kir.bed"
        return "-T ^${hla_kir_file} -Oz -W=tbi"
        }
        publishDir = [ path: "${params.outdir}/PREPROCESS/FILTER_LOWCONF", mode: 'copy' ]
    }

    withName: BCFTOOLS_VIEW_EXCL_ALL {
        // Exclude centromeres, segmental duplications and HLA/KIR regions
        ext.prefix = { "${meta.id}_filtered_final" }
        ext.args = { 
        def excluded_regions_file = params.excluded_regions_bed ?: "${projectDir}/conf/resources/${params.genome_build}/excluded_regions.bed"
        return "-T ^${excluded_regions_file} -Oz -W=tbi"
        }
        publishDir = [ path: "${params.outdir}/PREPROCESS/FILTER_LOWCONF", mode: 'copy' ]
    }
}




    

